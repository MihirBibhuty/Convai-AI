/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export function NancyModel(props) {
    const group = useRef();
    const { nodes, materials, animations } = useGLTF("/NancyRobo.glb");
    const { actions } = useAnimations(animations, group);

    const handleAnimation = (animationName) => {
        var from = animationName === "talk" ? 'Stand' : 'Talk';
        var to = animationName === "talk" ? 'Talk' : 'Stand';
        if (actions[from]?.isRunning()) { // Add optional chaining and nullish coalescing operator
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    };

    useEffect(() => {
        handleAnimation(props.animationName);
    }, [props.animationName]);

    // Dance
    useEffect(() => {
        console.log(props.dance);
        var from = props.dance ? 'Stand' : 'Dance';
        var to = props.dance ? 'Dance' : 'Stand';
        if (actions[from]?.isRunning()) {
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    }, [props.dance]);

    // Jump/PowerUp
    useEffect(() => {
        console.log(props.jump);
        var from = props.jump ? 'Stand' : 'Flip';
        var to = props.jump ? 'Flip' : 'Stand';
        if (actions[from]?.isRunning()) {
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    }, [props.jump]);

    // Punch
    useEffect(() => {
        console.log(props.punch);
        var from = props.punch ? 'Stand' : 'Punch';
        var to = props.punch ? 'Punch' : 'Stand';
        if (actions[from]?.isRunning()) {
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    }, [props.punch]);

    // Kick
    useEffect(() => {
        console.log(props.kick);
        var from = props.kick ? 'Stand' : 'Kick';
        var to = props.kick ? 'Kick' : 'Stand';
        if (actions[from]?.isRunning()) {
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    }, [props.kick]);

    // Special/Sword
    useEffect(() => {
        console.log(props.special);
        var from = props.special ? 'Stand' : 'SpellCast';
        var to = props.special ? 'SpellCast' : 'Stand';
        if (actions[from]?.isRunning()) {
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    }, [props.special]);

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group
                    name="Light"
                    position={[4.08, 5.9, -1.01]}
                    rotation={[1.89, 0.88, -2.05]}
                />
                <group
                    name="Camera"
                    position={[7.36, 4.96, 6.93]}
                    rotation={[1.24, 0.33, -0.76]}
                />
                <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                    <primitive object={nodes.mixamorigHips} />
                    <group name="Mdea_mesh">
                        <skinnedMesh
                            name="Mdea_mesh_1"
                            geometry={nodes.Mdea_mesh_1.geometry}
                            material={materials.Mdea_MAT}
                            skeleton={nodes.Mdea_mesh_1.skeleton}
                        />
                        <skinnedMesh
                            name="Mdea_mesh_2"
                            geometry={nodes.Mdea_mesh_2.geometry}
                            material={materials.Mdea_MAT_}
                            skeleton={nodes.Mdea_mesh_2.skeleton}
                        />
                    </group>
                </group>
            </group>
        </group>
    );
}

useGLTF.preload("/NancyRobo.glb");
