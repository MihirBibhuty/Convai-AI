/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export function MariaWorrierModel(props) {
    const group = useRef();
    const { nodes, materials, animations } = useGLTF("/MariaWorrier.glb");
    const { actions } = useAnimations(animations, group);

    const handleAnimation = (animationName) => {
        var from = animationName === "talk" ? 'standing' : 'talking';
        var to = animationName === "talk" ? 'talking' : 'standing';
        if (actions[from]?.isRunning()) { // Add optional chaining and nullish coalescing operator
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    };

    useEffect(() => {
        handleAnimation(props.animationName);
    }, [props.animationName]);


    // Dance
    useEffect(() => {
        console.log(props.dance);
        var from = props.dance ? 'standing' : 'Dance';
        var to = props.dance ? 'Dance' : 'standing';
        if (actions[from]?.isRunning()) {
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    }, [props.dance]);

    // Jump/PowerUp
    useEffect(() => {
        console.log(props.jump);
        var from = props.jump ? 'standing' : 'powerup';
        var to = props.jump ? 'powerup' : 'standing';
        if (actions[from]?.isRunning()) {
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    }, [props.jump]);

    // Punch
    useEffect(() => {
        console.log(props.punch);
        var from = props.punch ? 'standing' : 'Punch';
        var to = props.punch ? 'Punch' : 'standing';
        if (actions[from]?.isRunning()) {
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    }, [props.punch]);

    // Kick
    useEffect(() => {
        console.log(props.kick);
        var from = props.kick ? 'standing' : 'flipkick';
        var to = props.kick ? 'flipkick' : 'standing';
        if (actions[from]?.isRunning()) {
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    }, [props.kick]);

    // Special/Sword
    useEffect(() => {
        console.log(props.special);
        var from = props.special ? 'standing' : 'SwordCasting';
        var to = props.special ? 'SwordCasting' : 'standing';
        if (actions[from]?.isRunning()) {
            actions[from].fadeOut(0.3);
        }
        if (actions[to]) { // Add null check
            actions[to].reset().fadeIn(0.3).play();
        }
    }, [props.special]);


    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group
                    name="Camera"
                    position={[7.36, 4.96, 6.93]}
                    rotation={[1.24, 0.33, -0.76]}
                />
                <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                    <primitive object={nodes.mixamorigHips} />
                    <skinnedMesh
                        name="Maria_J_J_Ong"
                        geometry={nodes.Maria_J_J_Ong.geometry}
                        material={materials.MariaMat}
                        skeleton={nodes.Maria_J_J_Ong.skeleton}
                    />
                    <skinnedMesh
                        name="Maria_sword"
                        geometry={nodes.Maria_sword.geometry}
                        material={materials.MariaMat}
                        skeleton={nodes.Maria_sword.skeleton}
                    />
                </group>
            </group>
        </group>
    );
}

useGLTF.preload("/MariaWorrier.glb");
